#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
#define NUM_PRODUCERS 2
#define NUM_CONSUMERS 2

int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty, full, mutex;

void *producer(void *arg) {
    int item;
    while(1) {
        item = rand() % 100; // Produce an item
        sem_wait(&empty); // Wait if buffer is full
        sem_wait(&mutex); // Wait for access to buffer
        buffer[in] = item; // Put item in buffer
        printf("Produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE;
        sem_post(&mutex); // Release buffer access
        sem_post(&full); // Signal that buffer is not empty
        usleep(100000); // Sleep for a short time
    }
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    int item;
    while(1) {
        sem_wait(&full); // Wait if buffer is empty
        sem_wait(&mutex); // Wait for access to buffer
        item = buffer[out]; // Get item from buffer
        printf("Consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE;
        sem_post(&mutex); // Release buffer access
        sem_post(&empty); // Signal that buffer is not full
        usleep(200000); // Sleep for a short time
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t producers[NUM_PRODUCERS];
    pthread_t consumers[NUM_CONSUMERS];

    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);

    // Create producer threads
    for(int i = 0; i < NUM_PRODUCERS; i++)
        pthread_create(&producers[i], NULL, producer, NULL);

    // Create consumer threads
    for(int i = 0; i < NUM_CONSUMERS; i++)
        pthread_create(&consumers[i], NULL, consumer, NULL);

    // Join producer threads
    for(int i = 0; i < NUM_PRODUCERS; i++)
        pthread_join(producers[i], NULL);

    // Join consumer threads
    for(int i = 0; i < NUM_CONSUMERS; i++)
        pthread_join(consumers[i], NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);

    return 0;
}
